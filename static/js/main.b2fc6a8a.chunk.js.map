{"version":3,"sources":["Component/SearchBox.js","Component/CardList.js","Component/Container.js","App.js","serviceWorker.js","index.js"],"names":["regex","SearchBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","validateHex","event","setState","hexCode","target","value","state","_this2","react_default","a","createElement","id","type","placeholder","onChange","disabled","test","onClick","props","newItem","newCallback","React","Component","CardList","_ref","swatches","map","swatch","i","styleObj","background","color","className","style","name","Container","Component_SearchBox","Component_CardList","nextName","cb","data","setTimeout","App","callback","toConsumableArray","newSwatch","push","initItems","console","log","length","Component_Container","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b2fc6a8a.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../index.css';\r\n//let isAHexCode=false;\r\nlet regex=/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\r\n\r\nclass SearchBox extends React.Component{\t\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\thexCode:''\r\n\t\t}\r\n\t}\r\n\tvalidateHex = (event) =>{\r\n\t\r\n\t//console.log(event.target.value);\r\n\t//const regex=/^[0-9A-Fa-f]{7}$/;\r\n\tthis.setState({\r\n\t\thexCode:event.target.value\r\n\t})\r\n\t//console.log(isAHexCode , (event.target.value).startsWith(\"#\"),(event.target.value).match(regex));\r\n\t//console.log('Function',this.state.isAHexCode);\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t       <div id=\"box-div\">\r\n\t       \t<input type='text' placeholder='#C0FFEE' onChange={this.validateHex}/>\r\n\t       \t<button disabled={!regex.test(this.state.hexCode)} onClick={() => this.props.newItem(this.state.hexCode,this.props.newCallback)}>\r\n\t       \t\t{/*console.log('State changed')*/}\r\n\t       \t\tAdd Swatch\r\n\t       \t</button>\r\n\t       \t{/*console.log(this.state.isAHexCode)*/}\r\n\t       </div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nimport '../index.css';\r\nconst CardList = ({swatches}) =>{\r\n\treturn(\r\n\t      <div>\r\n\t      \t{\r\n\t      \t\tswatches.map((swatch,i) => {\r\n\t      \t\t\t//console.log('cardlist',swatch);\r\n\t      \t\t\tconst styleObj={\r\n\t      \t\t\t\tbackground:swatch.color\r\n\t      \t\t\t}\r\n\t      \t\t\treturn(\r\n\t      \t\t\t       <div className='card' style={styleObj}>\r\n\t\t\t\t\t       \t\t{swatch.name}\r\n\t\t\t\t\t       </div>\r\n\t      \t\t\t)\r\n\t      \t\t})\r\n\t      \t}\r\n\t      </div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport SearchBox from './SearchBox';\r\nimport CardList from './CardList';\r\nconst Container = ({swatches,newItem,newCallback}) => {\r\n\treturn(\r\n\t       <div>\r\n\t       \t\t<SearchBox newItem={newItem} newCallback={newCallback}/>\r\n\t       \t\t{/*console.log(swatches)*/}\r\n\t       \t\t<CardList swatches={swatches}/>\r\n\t       </div>\r\n\t)\r\n}\r\nexport default Container;","import React, { Component } from 'react';\nimport './index.css';\nimport Container from './Component/Container';\n\nfunction initItems(cb) {\n    const data = [\n        { color: \"#FF0000\", name: 1 },\n        { color: \"#00FF00\", name: 2 },\n        { color: \"#0000FF\", name: 3 }\n    ];\n    setTimeout(()=>cb(data), 2000)\n}\nlet nextName = 4;\n \nfunction newItem(color, cb) {\n    const data = {\n        color: color,\n        name: nextName\n    };\n    nextName++\n    setTimeout(()=>cb(data), 500);\n}\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      swatches:[],\n    }\n  }\n  componentDidMount(){\n    initItems(this.callback);\n    console.log('PWA');\n  }\n  callback = (data) =>{\n    this.setState({\n      swatches:[...data]\n    })\n \n  }\n  newCallback = (data) =>{\n    var newSwatch=[...this.state.swatches];\n    newSwatch.push(data);\n    /*this.setState({\n      swatches:[...newSwatch]\n    })*/\n    this.callback(newSwatch);\n    //console.log('newCallback',this.state.swatches);\n  }\n  render() {\n    if(!this.state.swatches.length){\n      return(\n             <div>\n              Loading...\n             </div>\n      )\n    }\n    else{\n      return (\n        <div className=\"App\">\n          <Container swatches={this.state.swatches} newItem={newItem} newCallback={this.newCallback}/>\n          {/*console.log(this.state.swatches)*/}\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('react-root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}